/*
  This file is automatically generated. Any changes will be overwritten.
  Modify dashboard.component.ts instead.
*/
import { ChangeDetectorRef, ViewChild, AfterViewInit, Injector, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { Subscription } from 'rxjs';

import { DialogService, DIALOG_PARAMETERS, DialogRef } from '@radzen/angular/dist/dialog';
import { NotificationService } from '@radzen/angular/dist/notification';
import { ContentComponent } from '@radzen/angular/dist/content';
import { CardComponent } from '@radzen/angular/dist/card';
import { FieldsetComponent } from '@radzen/angular/dist/fieldset';
import { DataListComponent } from '@radzen/angular/dist/datalist';
import { ImageComponent } from '@radzen/angular/dist/image';
import { HeadingComponent } from '@radzen/angular/dist/heading';
import { TabsComponent } from '@radzen/angular/dist/tabs';
import { PieComponent } from '@radzen/angular/dist/pie';
import { SchedulerComponent } from '@radzen/angular/dist/scheduler';
import { GridComponent } from '@radzen/angular/dist/grid';
import { ChartComponent } from '@radzen/angular/dist/chart';

import { NorthwindService } from '../northwind.service';
import { SecurityService } from '../security.service';

export class DashboardGenerated implements AfterViewInit, OnInit, OnDestroy {
  // Components
  @ViewChild('content1') content1: ContentComponent;
  @ViewChild('card2') card2: CardComponent;
  @ViewChild('fieldset2') fieldset2: FieldsetComponent;
  @ViewChild('datalist0') datalist0: DataListComponent;
  @ViewChild('tabs0') tabs0: TabsComponent;
  @ViewChild('pie0') pie0: PieComponent;
  @ViewChild('scheduler0') scheduler0: SchedulerComponent;
  @ViewChild('card0') card0: CardComponent;
  @ViewChild('fieldset0') fieldset0: FieldsetComponent;
  @ViewChild('grid0') grid0: GridComponent;
  @ViewChild('card1') card1: CardComponent;
  @ViewChild('fieldset1') fieldset1: FieldsetComponent;
  @ViewChild('chart0') chart0: ChartComponent;

  router: Router;

  cd: ChangeDetectorRef;

  route: ActivatedRoute;

  notificationService: NotificationService;

  dialogService: DialogService;

  dialogRef: DialogRef;

  _location: Location;

  _subscription: Subscription;

  northwind: NorthwindService;

  security: SecurityService;

  getEmployeesResult: any;

  getEmployeesCount: any;

  employee: any;

  getOrdersResult: any;

  order: any;

  ordersByCustomer: any;

  parameters: any;

  constructor(private injector: Injector) {
  }

  ngOnInit() {
    this.notificationService = this.injector.get(NotificationService);

    this.dialogService = this.injector.get(DialogService);

    this.dialogRef = this.injector.get(DialogRef, null);

    this.router = this.injector.get(Router);

    this.cd = this.injector.get(ChangeDetectorRef);

    this._location = this.injector.get(Location);

    this.route = this.injector.get(ActivatedRoute);

    this.northwind = this.injector.get(NorthwindService);
    this.security = this.injector.get(SecurityService);
  }

  ngAfterViewInit() {
    this._subscription = this.route.params.subscribe(parameters => {
      if (this.dialogRef) {
        this.parameters = this.injector.get(DIALOG_PARAMETERS);
      } else {
        this.parameters = parameters;
      }
      this.load();
      this.cd.detectChanges();
    });
  }

  ngOnDestroy() {
    this._subscription.unsubscribe();
  }


  load() {
    this.northwind.getEmployees(null, this.datalist0.allowPaging ? this.datalist0.pageSize : null, this.datalist0.allowPaging ? 0 : null, null, null, this.datalist0.allowPaging)
    .subscribe((result: any) => {
      this.getEmployeesResult = result.value;

      this.getEmployeesCount = this.datalist0.allowPaging ? result['@odata.count'] : result.value.length;

      this.employee = result.value[0];

      this.northwind.getNorthwindOrders(`EmployeeID eq ${this.employee.EmployeeID}`, 10, null, `OrderDate DESC`, `Customer`, null)
      .subscribe((result: any) => {
        this.getOrdersResult = result.value;

        this.order = result.value[0];

        this.northwind.getNorthwindOrders(`CustomerID eq '${this.order.CustomerID}'`, null, null, null, `Customer`, null)
        .subscribe((result: any) => {
          this.ordersByCustomer = result.value;
        }, (result: any) => {

        });
      }, (result: any) => {

      });
    }, (result: any) => {

    });
  }

  datalist0LoadData(event: any) {
    this.northwind.getEmployees(null, event.top, event.skip, null, ``, event.top != null && event.skip != null)
    .subscribe((result: any) => {
      this.getEmployeesResult = result.value;

      this.getEmployeesCount = event.top != null && event.skip != null ? result['@odata.count'] : result.value.length;

      this.employee = result.value[0];

      this.northwind.getNorthwindOrders(`EmployeeID eq ${this.employee.EmployeeID}`, 10, null, `OrderDate DESC`, `Customer`, null)
      .subscribe((result: any) => {
        this.getOrdersResult = result.value;

        this.order = result.value[0];

        this.northwind.getNorthwindOrders(`CustomerID eq '${this.order.CustomerID}'`, null, null, null, `Customer`, null)
        .subscribe((result: any) => {
          this.ordersByCustomer = result.value;
        }, (result: any) => {

        });
      }, (result: any) => {

      });
    }, (result: any) => {

    });
  }

  grid0LoadData(event: any) {
    this.northwind.getNorthwindOrders(null, null, null, null, `Employee,Customer,Shipper`, null)
    .subscribe((result: any) => {

    }, (result: any) => {

    });
  }

  grid0RowSelect(event: any) {
    this.northwind.getNorthwindOrders(`CustomerID eq '${event.CustomerID}'`, null, null, null, `Customer`, null)
    .subscribe((result: any) => {
      this.ordersByCustomer = result.value;
    }, (result: any) => {

    });
  }
}
